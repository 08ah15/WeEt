<?php

declare(strict_types=1);

use Fisharebest\Webtrees\I18N;
use Fisharebest\Webtrees\Registry;
use Fisharebest\Webtrees\Source;
use Fisharebest\Webtrees\Tree;
use Illuminate\Database\Capsule\Manager as DB;
use Illuminate\Database\Query\Expression;
use Illuminate\Database\Query\JoinClause;
use Illuminate\Support\Collection;

/**
 * @var Collection<int,Source> $sources
 * @var Tree                   $tree
 */

?>

<?php
// Count the number of linked records. These numbers include private records.
// It is not good to bypass privacy, but many servers do not have the resources
// to process privacy for every record in the tree
$count_individuals = DB::table('individuals')
    ->join('link', static function (JoinClause $join): void {
        $join->on('l_from', '=', 'i_id');
        $join->on('l_file', '=', 'i_file');
    })
    ->where('l_type', '=', 'SOUR')
    ->where('l_file', '=', $tree->id())
    ->groupBy(['l_to'])
    ->pluck(new Expression('COUNT(*) AS total'), 'l_to')
    ->map(static fn ($n) => (int) $n)
    ->all();

$count_families = DB::table('families')
    ->join('link', static function (JoinClause $join): void {
        $join->on('l_from', '=', 'f_id');
        $join->on('l_file', '=', 'f_file');
    })
    ->where('l_type', '=', 'SOUR')
    ->where('l_file', '=', $tree->id())
    ->groupBy(['l_to'])
    ->pluck(new Expression('COUNT(*) AS total'), 'l_to')
    ->map(static fn ($n) => (int) $n)
    ->all();

$count_media = DB::table('media')
    ->join('link', static function (JoinClause $join): void {
        $join->on('l_from', '=', 'm_id');
        $join->on('l_file', '=', 'm_file');
    })
    ->where('l_type', '=', 'SOUR')
    ->where('l_file', '=', $tree->id())
    ->groupBy(['l_to'])
    ->pluck(new Expression('COUNT(*) AS total'), 'l_to')
    ->map(static fn ($n) => (int) $n)
    ->all();
    

$count_notes = DB::table('other')
    ->join('link', static function (JoinClause $join): void {
        $join->on('l_from', '=', 'o_id');
        $join->on('l_file', '=', 'o_file');
    })
    ->where('o_type', '=', 'NOTE')
    ->where('l_type', '=', 'SOUR')
    ->where('l_file', '=', $tree->id())
    ->groupBy(['l_to'])
    ->pluck(new Expression('COUNT(*) AS total'), 'l_to')
    ->map(static fn ($n) => (int) $n)
    ->all();

 
?>

<table
    class="table table-bordered table-sm wt-table-source datatables d-none"
        <?= view('lists/datatables-attributes') ?> 
    	  data-columns="<?= e(json_encode([
        ['type' => 'html'],
        null,
  		  null,
    ], JSON_THROW_ON_ERROR)) ?>"
>
    <caption class="visually-hidden">
        <?= $caption ?? I18N::translate('Sources') ?>
    </caption>

    <thead>
        <tr>
            <th><?= I18N::translate('Title') ?></th>
            <th class="d-none d-md-table-cell"><?= I18N::translate('Publication') ?></th>
            <th class="d-none d-md-table-cell"><?= I18N::translate('Media objects') ?></th>
        </tr>
    </thead>

    <tbody>
        <?php foreach ($sources as $source) : ?>
            <tr class="<?= $source->isPendingAddition() ? 'wt-new' : '' ?> <?= $source->isPendingDeletion() ? 'wt-old' : '' ?>">
                <!-- Title -->
                <td class="d-none d-md-table-cell"> 
                    <a href="<?= e($source->url()) ?>">
                        <?= $source->fullName() ?>
                    </a>
                </td>

                <!-- Publisher -->
                <td class="d-none d-md-table-cell">
                    <?= Registry::elementFactory()->make('SOUR:PUBL')->value($source->facts(['PUBL'])->isNotEmpty() ? $source->facts(['PUBL'])->first()->value() : '', $tree) ?>
                </td>

                <!-- Lined media objects -->
                <td class="d-none d-md-table-cell">
                    <?= Registry::elementFactory()->make('SOUR:OBJE')->value($source->facts(['OBJE'])->isNotEmpty() ? $source->facts(['OBJE'])->first()->value() : '', $tree) ?>
                </td> 
            </tr>
        <?php endforeach ?>
    </tbody>
</table>
